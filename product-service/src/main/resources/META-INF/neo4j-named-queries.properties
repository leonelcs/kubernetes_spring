Promotion.findAllRelevantSubscriptionBundles = \
  MATCH(p:Promotion) \
       <-[u:SOLD_UNDER]-(s:Subscription {lineup:{lineUpValue}}) \
       -[:FREE_UNIT]->(f:FreeUnit) \
 WHERE p.contract_duration_condition in [12,24] \
   \
  AND datetime(s.sale_start_date) < datetime() < datetime(s.sale_end_date) \
  AND datetime(p.sale_start_date) < datetime() < datetime(p.sale_end_date) \
WITH s, p, f \
MATCH (s)-[:EXTENSION]->(se:Extension) \
WITH s, p, se, f \
RETURN \
  "p"+p.id+":s"+s.id AS id, replace(s.name, "KPN ", "") AS name, \
  toFloat(s.list_price_inc_vat) AS listPrice, \
  toInteger(p.contract_duration_condition) AS duration, \
  se.tagline AS description, \
  round(toFloat(s.list_price_inc_vat) * (100 - toFloat(p.value)))/100 AS actualPrice, \
  collect( \
  [ \
    CASE WHEN f.unit = 'MEGABYTES' THEN  toString(f.amount / 1000) \
      WHEN f.amount = 999999999 THEN 'Onbeperkt' \
      ELSE toString(f.amount)  \
      END, \
    CASE WHEN f.unit = 'MEGABYTES' THEN  'GB' \
      WHEN f.unit = 'UNIT' THEN  'bel/sms' \
      WHEN f.unit = 'MINUTES' THEN  'bel/sms' \
      WHEN f.unit = 'ITEMS' THEN  'bel/sms' \
      ELSE f.unit \
      END, \
 \
    CASE WHEN f.type = 'NATIONAL_DATA' THEN 'data' \
      WHEN f.type IN['NATIONAL_VOICE', 'NATIONAL_SMS'] THEN 'voice_sms' \
      WHEN f.type = 'ROAMING_DATA' THEN 'roam' \
      WHEN f.type = 'NATIONAL_COMBINED' THEN 'comb' \
      END \
  ]) AS bundles \
  ORDER BY duration, actualPrice

Promotion.findAllRelevantSubscriptionBundlesById = \
  MATCH(p:Promotion {id: {promotionId}}) \
       <-[u:SOLD_UNDER]-(s:Subscription {id:{subscriptionId}}) \
       -[:FREE_UNIT]->(f:FreeUnit) \
 WHERE p.contract_duration_condition in [12,24] \
   \
  AND datetime(s.sale_start_date) < datetime() < datetime(s.sale_end_date) \
  AND datetime(p.sale_start_date) < datetime() < datetime(p.sale_end_date) \
WITH s, p, f \
MATCH (s)-[:EXTENSION]->(se:Extension) \
WITH s, p, se, f \
RETURN \
  "p"+p.id+":s"+s.id AS id, replace(s.name, "KPN ", "") AS name, \
  toFloat(s.list_price_inc_vat) AS listPrice, \
  toInteger(p.contract_duration_condition) AS duration, \
  se.tagline AS description, \
  round(toFloat(s.list_price_inc_vat) * (100 - toFloat(p.value)))/100 AS actualPrice, \
  collect( \
  [ \
    CASE WHEN f.unit = 'MEGABYTES' THEN  toString(f.amount / 1000) \
      WHEN f.amount = 999999999 THEN 'Onbeperkt' \
      ELSE toString(f.amount)  \
      END, \
    CASE WHEN f.unit = 'MEGABYTES' THEN  'GB' \
      WHEN f.unit = 'UNIT' THEN  'bel/sms' \
      WHEN f.unit = 'MINUTES' THEN  'bel/sms' \
      WHEN f.unit = 'ITEMS' THEN  'bel/sms' \
      ELSE f.unit \
      END, \
 \
    CASE WHEN f.type = 'NATIONAL_DATA' THEN 'data' \
      WHEN f.type IN['NATIONAL_VOICE', 'NATIONAL_SMS'] THEN 'voice_sms' \
      WHEN f.type = 'ROAMING_DATA' THEN 'roam' \
      WHEN f.type = 'NATIONAL_COMBINED' THEN 'comb' \
      END \
  ]) AS bundles \
  ORDER BY duration, actualPrice
