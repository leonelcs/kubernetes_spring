apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

task buildDocker(type: Docker) {
    push = false
    tagVersion = 'latest'

    exposePort(8080)

    volume('/tmp')
    addFile {
        from jar
        rename {'app.jar'}
    }
    setEntryPoint(["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app.jar"])
    runCommand('addgroup --gid 1000 --system app && adduser --uid 1000 --system app --ingroup app')
    addInstruction('USER', '1000')
}
buildDocker.dependsOn(build)

docker {
    baseImage "openjdk:8-jdk-alpine"
    maintainer 'SingleShop team "ruud.kenter@kpn.com"'
}

dependencies{

	implementation(
        'org.springframework.boot:spring-boot-starter-data-neo4j',
	    'org.springframework.boot:spring-boot-starter-data-rest',
	    'org.springframework.boot:spring-boot-starter-web',
	    'org.neo4j:neo4j-ogm-bolt-driver',
	    'com.google.guava:guava:27.0-jre',
	    'com.google.code.gson:gson:2.8.5',
	    'org.apache.commons:commons-lang3:3.8.1')
	
        
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
 	testImplementation (
 	    'org.springframework.boot:spring-boot-starter-test',
        'org.neo4j:neo4j-kernel:3.4.10',
        'org.neo4j:neo4j-io:3.4.10',
        'org.neo4j.test:neo4j-harness:3.4.10',
        'org.neo4j:neo4j-ogm-embedded-driver:3.1.4',
        'org.neo4j.procedure:apoc:3.4.0.4', 
        'org.yaml:snakeyaml:1.23'
        )
 	
}

// Ensure that the developer-specific neo4j system properties aka environment variables you set 
// in your ~/.gradle/gradle.properties file, will also be available when running the api.
// Put in the following to be able to run the api locally with 'gradle bootRun' :
//
// systemProp.product-db-user=neo4j
// systemProp.product-db-password={your password}
// systemProp.product-db-host=localhost
//
bootRun {
    [ "product-db-user", "product-db-password", "product-db-host" ].each {
        systemProperty it, System.getProperty(it)
    }
    String activeProfile =  System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
}
